/*
 * model
 *
 * API for interacting with model.
 *
 * API version: 0.0.1
 * Contact: contact@josehernandez.dev
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package smidgen

import (
	"database/sql"
	utils "smidgen-backend/go/utils"
)

type User struct {
	UserId         int32          `json:"user_id"`
	BusinessUnitId int32          `json:"business_unit_id"`
	Username       string         `json:"username"`
	Email          string         `json:"email"`
	SaltedEmail    sql.NullString `json:"salted_password"`
}

// AssertUserRequired checks if the required fields are not zero-ed
func AssertUserRequired(obj User) error {
	elements := map[string]interface{}{
		"user_id":          obj.UserId,
		"business_unit_id": obj.BusinessUnitId,
		"username":         obj.Username,
		"email":            obj.Email,
	}
	for name, el := range elements {
		if isZero := utils.IsZeroValue(el); isZero {
			return &utils.RequiredError{Field: name}
		}
	}

	return nil
}

// AssertUserConstraints checks if the values respects the defined constraints
func AssertUserConstraints(obj User) error {
	return nil
}
