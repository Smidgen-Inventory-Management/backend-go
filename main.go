/*
 * Smidgen
 *
 * API for interacting with Smidgen.
 *
 * API version: 0.0.1
 * Contact: contact@josehernandez.dev
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	api "smidgen-backend/go/api"
	service "smidgen-backend/go/api/services"
	models "smidgen-backend/go/models"
	utils "smidgen-backend/go/utils"

	"gopkg.in/yaml.v2"
)

func main() {

	if len(os.Args) < 3 {
		fmt.Println("Usage: go run main.go <path_to_server_configurations> <path_to_database_configurations>")
		return
	}

	serverConfig, err := LoadServerConfig(os.Args[1])
	if err != nil {
		log.Fatalf("Failed to load server config: %v", err)
	}

	developmentConfig, ok := serverConfig.Environments["Development"]
	if !ok {
		log.Fatal("Development environment configuration not found")
	}

	hostname := developmentConfig.Host + ":" + developmentConfig.Port
	log.Printf("Server starting on %s", hostname)

	BusinessUnitAPIService := service.NewBusinessUnitAPIService()
	BusinessUnitAPIController := api.NewBusinessUnitAPIController(BusinessUnitAPIService)

	DefaultAPIService := service.NewDefaultAPIService()
	DefaultAPIController := api.NewDefaultAPIController(DefaultAPIService)

	EquipmentAPIService := service.NewEquipmentAPIService()
	EquipmentAPIController := api.NewEquipmentAPIController(EquipmentAPIService)

	EquipmentAssignmentAPIService := service.NewEquipmentAssignmentAPIService()
	EquipmentAssignmentAPIController := api.NewEquipmentAssignmentAPIController(EquipmentAssignmentAPIService)

	UserAPIService := service.NewUserAPIService()
	UserAPIController := api.NewUserAPIController(UserAPIService)

	router := utils.NewRouter(developmentConfig.RootPath, BusinessUnitAPIController, DefaultAPIController, EquipmentAPIController, EquipmentAssignmentAPIController, UserAPIController)

	err = http.ListenAndServe(hostname, router)
	if err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}
}

func LoadServerConfig(yamlFilePath string) (models.ServerConfig, error) {
	yamlFile, err := os.Open(yamlFilePath)
	if err != nil {
		return models.ServerConfig{}, fmt.Errorf("\nfailed to open YAML file: %v", err)
	}
	defer yamlFile.Close()

	yamlData, err := io.ReadAll(yamlFile)
	if err != nil {
		return models.ServerConfig{}, fmt.Errorf("\nfailed to read YAML file: %v", err)
	}
	var config models.ServerConfig
	if err := yaml.Unmarshal(yamlData, &config); err != nil {
		return models.ServerConfig{}, fmt.Errorf("\nfailed to unmarshal YAML: %v", err)
	}
	return config, nil
}
